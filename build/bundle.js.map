{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../src/stores/active-selection.ts","../../src/utils.ts","../../src/stores/data.ts","../../src/stores/local-storage.ts","../../src/comps/Welcome.svelte","../../src/comps/Results.svelte","../../src/comps/Challenges.svelte","../../src/comps/Videos.svelte","../../src/comps/Reactions.svelte","../../src/comps/Github.svelte","../../src/staffel/2022.svelte","../../src/staffel/2021.svelte","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.2' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { writable } from 'svelte/store';\nconst storedActiveSelectionWritable = writable({\n    staffelKey: 0,\n    episodeID: '',\n    reason: 'default',\n    site: '',\n});\nexport const storedActiveSelection = {\n    subscribe: storedActiveSelectionWritable.subscribe,\n    set: storedActiveSelectionWritable.set,\n    update: storedActiveSelectionWritable.update,\n};\n","// 1:04:54\n// 18:16\nexport const getSecondsFromStrDuration = (strDuration) => {\n    return strDuration.split(':').reduce((acc, time) => (60 * acc) + +time);\n};\nexport const toHHMMSS = (secs) => {\n    const sec_num = parseInt(secs, 10);\n    const hours = Math.floor(sec_num / 3600);\n    const minutes = Math.floor(sec_num / 60) % 60;\n    const seconds = sec_num % 60;\n    return [hours, minutes, seconds]\n        .map(v => v < 10 ? \"0\" + v : v)\n        .filter((v, i) => v !== \"00\" || i > 0)\n        .join(\":\");\n};\n","import { writable } from 'svelte/store';\nimport { getSecondsFromStrDuration, toHHMMSS } from '../utils';\nimport JSON1 from '../../data/staffel-1.json';\nimport JSON2 from '../../data/staffel-2.json';\nexport const storedData = writable([]);\n// videos\n//  https://www.youtube.com/watch?v=\n//  img.youtube.com/vi/[Video-ID]/0.jpg\n//  img.youtube.com/vi/[Video-ID]/default.jpg\nconst youtubeVideoUrl = (ID) => !!ID ? `https://www.youtube.com/watch?v=${ID}` : '';\nconst youtubeThumbUrl = (ID) => `https://img.youtube.com/vi/${ID}/0.jpg`;\nconst defaultStore = {\n    durations: {\n        all: 0,\n        main: 0,\n        behindthescenes: 0,\n        interview: 0,\n        reactions: {\n            all: 0,\n            main: 0,\n            behindthescenes: 0,\n            interview: 0,\n        }\n    },\n    status: {},\n    reactions: [],\n    videos: [],\n    challenges: []\n};\nconst preparedStores = [defaultStore, Object.assign(Object.assign({}, defaultStore), JSON1), Object.assign(Object.assign({}, defaultStore), JSON2)];\npreparedStores.map((store, storeIndex) => {\n    if (store.status === 0) {\n        return store;\n    }\n    Object.entries(store.status).map(([challengerDataNameDays, challengerDataPoints]) => {\n        const challengerPoints = challengerDataPoints.split('|').map((i) => parseInt(i));\n        const endResult = challengerPoints.reduce((pv, cv) => pv + cv, 0);\n        const isOut = challengerDataNameDays.includes('*');\n        const isWinner = challengerDataNameDays.includes('!');\n        let [challengerName, exitDay] = challengerDataNameDays.split('*');\n        challengerName = challengerName.replace('!', '');\n        store.status[challengerDataNameDays] = {\n            name: challengerName,\n            challengerPoints,\n            endResult,\n            isOut,\n            isWinner,\n            exitDay: !!exitDay ? exitDay : -1,\n        };\n    });\n    const videosLength = store.videos.length;\n    store.videos = store.videos.map((video, index) => {\n        let reactions = 0;\n        let durationReactions = 0;\n        Object.keys(store.reactions).map(challenger => {\n            if (video.short in store.reactions[challenger]) {\n                const [youtubeID, duration] = store.reactions[challenger][video.short].split('|');\n                durationReactions += getSecondsFromStrDuration(duration);\n                reactions++;\n            }\n        });\n        const [youtubeID, duration] = video.id.split('|');\n        const videoType = video.short.includes('bts') ? 'behindthescenes' : video.short.includes('iv') ? 'interview' : 'main';\n        store.durations[videoType] += getSecondsFromStrDuration(duration);\n        store.durations.reactions[videoType] += durationReactions;\n        store.durations.all += getSecondsFromStrDuration(duration);\n        store.durations.reactions.all += durationReactions;\n        return {\n            id: videosLength - index,\n            title: video.title,\n            type: videoType,\n            url: youtubeVideoUrl(youtubeID),\n            thumb: youtubeThumbUrl(youtubeID),\n            date: video.date,\n            short: video.short,\n            duration: toHHMMSS(getSecondsFromStrDuration(duration)),\n            reactions,\n            durationReactions: toHHMMSS(durationReactions),\n        };\n    });\n    Object.keys(store.reactions).map(challenger => {\n        // @ts-ignore\n        return Object.entries(store.reactions[challenger]).map(([videoID, youtubeInfos]) => {\n            // @ts-ignore\n            const [youtubeID, duration] = youtubeInfos.split('|');\n            if (!!youtubeID) {\n                store.reactions[challenger][videoID] = {\n                    url: youtubeVideoUrl(youtubeID),\n                    thumb: youtubeThumbUrl(youtubeID),\n                    duration: toHHMMSS(getSecondsFromStrDuration(duration)),\n                };\n            }\n        });\n    });\n    preparedStores[storeIndex] = store;\n});\n// @ts-ignore\nstoredData.set(preparedStores);\n","export const localStore = {\n    set: (key, value) => {\n        return localStorage.setItem(key, value);\n    },\n    get: (key, defaultShizzle) => {\n        const lsShizzle = localStorage.getItem(key);\n        return JSON.parse(lsShizzle);\n    },\n    remove: (key) => {\n        return localStorage.removeItem(key);\n    },\n};\n","<slot name=\"header\" />\n<div class=\"welcome\">\n    <div class=\"welcome__content\">\n        <slot />\n    </div>\n</div>\n\n<style lang=\"scss\">\n  @import '../scss/variables';\n\n  h1 {\n    color: $color-primary-light;\n  }\n\n  :global([slot='header']) {\n    width: 100%;\n    border-radius: 20%;\n  }\n\n  .welcome {\n    padding-left: $space-xl;\n    text-align: center;\n  }\n</style>\n","<script lang=\"ts\">\n    import { storedData } from '../stores';\n\n    export let staffelKey;\n    let data;\n\n    storedData.subscribe(store => {\n        data = store[staffelKey]\n    });\n\n    $: resultsSorted = Object.entries(data.status)\n        .map(challenger => challenger[1])\n        .sort((a, b) => {\n            if (a.endResult > b.endResult) {\n                return -1;\n            }\n            if (a.endResult < b.endResult) {\n                return 1;\n            }\n            return 0;\n        })\n        .sort((a, b) => {\n            return (a.isOut === b.isOut) ? 0 : a.isOut ? 1 : -1;\n        })\n</script>\n\n<slot />\n<div class=\"results flex flex--wrap\">\n    {#each resultsSorted as result}\n        <div class=\"item{result.isOut ? ' transparent' : ''}\">\n            <img src=\"./images/challengers-{staffelKey}/{result.name}{result.isWinner ? '.winner' : ''}.png\"\n                 alt=\"{result.name}\"/>\n            <strong>{!!result.endResult ?  `${result.endResult} Punkt${result.endResult !==  1 ? 'e' : ''}` : ''}</strong><br />\n            {result.exitDay > -1 ? `Ausgeschieden an Tag ${result.exitDay}` : ''}\n            <!--{#if challenger.challengePoints.length > 1}&nbsp;= {challenger.challengePoints.join(' + ')}{/if}-->\n        </div>\n    {/each}\n</div>\n\n<style lang=\"scss\">\n  @import '../scss/variables';\n\n  .results {\n    gap: $space-xl;\n    align-items: center;\n    flex-direction: column;\n\n    @media (min-width: 1024px) {\n      flex-direction: inherit;\n    }\n\n    .item {\n      text-align: center;\n\n      img {\n        width: 150px;\n        vertical-align: middle;\n      }\n\n      strong {\n        color: $color-primary-lighter;\n        font-size: ms(2);\n      }\n\n      &.transparent img {\n        opacity: 0.5;\n        filter: grayscale(1);\n      }\n    }\n  }\n</style>\n","<script lang=\"ts\">\n    import { storedData } from '../stores';\n\n    export let staffelKey;\n    let data;\n\n    storedData.subscribe(store => {\n        data = store[staffelKey]\n    });\n\n    const showPoints = (result) => {\n        const results = result.split('|');\n        const points = results[1];\n        return points !== '-' ? parseInt(points) : points;\n    }\n\n    const showDescription = (result) => {\n        const results = result.split('|');\n        return results[0];\n    }\n\n    $: challengesSorted = 'challenges' in data && data.challenges.map((challenge) => {\n        const challengers = Object.entries(challenge.challengers).map((challenger) => {\n            return {\n                name: challenger[0],\n                points: showPoints(challenger[1]),\n                desc: showDescription(challenger[1]),\n            }\n        }).sort((a, b) => {\n            if (a.points > b.points) {\n                return -1;\n            }\n            if (a.points < b.points) {\n                return 1;\n            }\n            return 0;\n        });\n\n        return {\n            title: challenge.title,\n            challengers,\n        }\n    });\n\n</script>\n\n{#if challengesSorted}\n<h2>\n    Challenges\n</h2>\n<div class=\"challenges flex flex--wrap\">\n    {#each challengesSorted as challenge, index}\n        <div class=\"item\">\n            <h3>{challenge.title}</h3>\n            <div class=\"challengers flex flex--vertical\">\n                {#each challenge.challengers as challenger}\n                    <div class=\"challengers__challenger flex\">\n                        <span class=\"challengers__name\">{challenger.name}:&nbsp;</span>\n                        {#if challenger.points}<strong class=\"challengers__points\">{challenger.points}</strong>{/if}\n                        <span>{challenger.desc}</span>\n                    </div>\n                {/each}\n            </div>\n        </div>\n    {/each}\n</div>\n{/if}\n\n<style lang=\"scss\">\n  @import '../scss/variables';\n\n  .challenges {\n    gap: $space-xs;\n    align-items: center;\n    flex-direction: column;\n\n    @media (min-width: 1024px) {\n      flex-direction: inherit;\n      align-items: baseline;\n    }\n\n    .item {\n      width: 100%;\n\n      @media (min-width: 1024px) {\n        width: 30%;\n      }\n    }\n\n    .challengers {\n      &__challenger {\n        gap: 0 5px;\n      }\n\n      &__name {\n        font-weight: bold;\n        display: inline-block;\n        width: 80px;\n        flex-shrink: 0;\n        text-align: right;\n\n        &:first-letter {\n          text-transform: capitalize;\n        }\n      }\n\n      &__points {\n        color: $color-primary-lighter;\n        font-size: ms(1);\n        display: inline-block;\n        width: 20px;\n        text-align: center;\n        flex-shrink: 0;\n        line-height: 18px;\n      }\n    }\n  }\n</style>\n","<script lang=\"ts\">\n    import { localStore, storedActiveSelection, storedData } from '../stores';\n    import {toHHMMSS} from '../utils'\n\n    export let staffelKey;\n\n    let videos;\n    let durations;\n    let activeEpisodeID;\n\n    storedData.subscribe(store => {\n        videos = store[staffelKey].videos;\n        durations = store[staffelKey].durations;\n    });\n\n    storedActiveSelection.subscribe(store => {\n        activeEpisodeID = store.episodeID;\n    });\n\n    const setEpisdodeID = (episodeID) => {\n        storedActiveSelection.update(store => {\n            store.episodeID = episodeID;\n            store.reason = 'reaction-show';\n            return store;\n        });\n\n        document.querySelector('#reactions').scrollIntoView({behavior: \"smooth\", block: \"center\"});\n\n        localStore.set('latestData', JSON.stringify({staffelKey, episodeID: episodeID}));\n    }\n</script>\n\n<h2 class=\"mb0\">Videos ({videos.length}): {toHHMMSS(durations.all)} Stundenmaterial / {toHHMMSS(durations.reactions.all)} Reactions</h2>\n<h3>\n    Hauptserie: {toHHMMSS(durations.main)} / {toHHMMSS(durations.reactions.main)} (hh:mm:ss)<br />\n    Behind The Scenes: {toHHMMSS(durations.behindthescenes)} / {toHHMMSS(durations.reactions.behindthescenes)} (hh:mm:ss)<br />\n    Interview: {toHHMMSS(durations.interview)} / {toHHMMSS(durations.reactions.interview)} (hh:mm:ss)<br />\n</h3>\n<div class=\"results flex flex--wrap\">\n    {#each videos as video}\n        <div class=\"item\">\n            <span class=\"title\">{video.title}</span>\n            {#if !!video.url}\n            <div class=\"wrapper\"\n                 class:active={activeEpisodeID === video.short}\n                 on:click={() => setEpisdodeID(video.short)}\n                 style=\"background-image:url({video.thumb})\">\n                {#if video.type !== 'interview'}\n                    <span class=\"short {video.type}\">{video.short.replace('bts', '')}. Folge</span>\n                {/if}\n                <span class=\"duration {video.type}\">{video.duration}</span>\n                <img src=\"{video.thumb}\" alt=\"{video.title}\"/>\n            </div>\n            {:else}\n                <img src=\"{video.thumb}\" alt=\"{video.title}\"/>\n            {/if}\n            <span class=\"date\">\n                {video.date}<br />\n                Reactions: {video.reactions} |\n                {video.durationReactions}<br />\n            </span>\n            <a href=\"{video.url}\" target=\"_blank\" title=\"Öffne das Video auf Youtube\" class=\"youtube\">\n                <img src=\"./images/youtube.svg\" alt=\"open youtube\" />\n            </a>\n        </div>\n    {/each}\n</div>\n\n<style lang=\"scss\">\n  @import '../scss/variables';\n\n  .mb0 {\n    margin-bottom: -16px;\n  }\n\n  .results {\n    gap: $space-md;\n    align-items: end;\n\n    .item {\n      position: relative;\n      width: 49%;\n      margin-bottom: $space-lg;\n      cursor: pointer;\n\n      @media (min-width: 1024px) {\n        width: 180px;\n      }\n\n      .title {\n        font-size: ms(-1);\n        display: block;\n        font-weight: bold;\n        margin-bottom: $space-xs;\n\n        &:first-letter {\n          text-transform: capitalize;\n        }\n      }\n\n      .wrapper {\n        position: relative;\n        background-position: center;\n        background-size: cover;\n        display: block;\n        border-radius: $border-radius-xl;\n\n        &.active {\n          outline: solid 3px $color-white;\n        }\n\n        .short,\n        .duration {\n          font-size: ms(-1);\n          font-weight: bold;\n          white-space: nowrap;\n          position: absolute;\n          bottom: 20px;\n          right: 0;\n          color: white;\n          background: rgba(0,0,0,0.5);\n          padding: 2px 6px;\n          border-radius: $border-radius-lg;\n\n          &:not(.behindthescenes) {\n            bottom: 0;\n            border-bottom-right-radius: $border-radius-xl;\n          }\n        }\n\n        .short {\n          left: 0;\n          right: auto;\n\n          &:not(.behindthescenes) {\n            bottom: 0;\n            border-bottom-right-radius: $border-radius-lg;\n            border-bottom-left-radius: $border-radius-xl;\n          }\n        }\n\n        img {\n          width: 75%;\n          visibility: hidden;\n          margin: 0;\n        }\n      }\n\n      .date {\n        display: block;\n        text-align: right;\n        font-size: ms(-2);\n        margin-top: $spacing-base;\n      }\n\n      .youtube {\n        position: absolute;\n        left: $spacing-base;\n        bottom: $spacing-base;\n\n        img {\n          width: 30px;\n        }\n      }\n    }\n  }\n</style>\n","<script lang=\"ts\">\n    import { storedActiveSelection, storedData } from '../stores';\n\n    export let staffelKey;\n    let data;\n\n    let episodeID;\n\n    storedActiveSelection.subscribe(store => {\n        episodeID = store.episodeID\n    });\n\n    storedData.subscribe(store => {\n        data = store[staffelKey]\n    });\n</script>\n\n{#if episodeID}\n<h2 id=\"reactions\">\n    Reactions von Folge \"{data.videos && data.videos.find(video => video.short === episodeID)}\"\n</h2>\n<div class=\"reactions flex flex--wrap\">\n    {#each Object.entries(data.reactions) as [youtuber, reactions]}\n        {#if reactions[episodeID] && reactions[episodeID].url}\n        <div class=\"item flex\">\n            <h3>{youtuber}</h3>\n            <div class=\"wrapper\" style=\"background-image: url({reactions[episodeID].thumb})\">\n                <a href=\"{reactions[episodeID].url}\" target=\"_blank\">\n                    <span class=\"duration\">{reactions[episodeID].duration}</span>\n                    <img src=\"{reactions[episodeID].thumb}\" alt=\"{reactions[episodeID].title}\"/>\n                </a>\n            </div>\n        </div>\n        {/if}\n    {/each}\n</div>\n{/if}\n\n<style lang=\"scss\">\n  @import '../scss/variables';\n\n  .reactions {\n    padding-left: $space-xl;\n    gap: $space-xl;\n\n    .flex {\n      gap: $space-xs;\n      flex-flow: column;\n      align-self: start;\n    }\n\n    .item {\n      width: 100px;\n\n      h3 {\n        display: block;\n        margin: 0;\n\n        &:first-letter {\n          text-transform: capitalize;\n        }\n      }\n    }\n\n    .wrapper {\n      background-size: cover;\n      background-position: center;\n      border-radius: $border-radius-lg;\n      position: relative;\n\n      .duration {\n        font-size: ms(-1);\n        font-weight: bold;\n        white-space: nowrap;\n        position: absolute;\n        bottom: 0;\n        right: 0;\n        color: white;\n        background: rgba(0,0,0,0.5);\n        padding: 2px 6px;\n        border-radius: 6px;\n      }\n\n      img {\n        width: 75%;\n        margin: 0;\n        visibility: hidden;\n      }\n    }\n  }\n</style>\n","<a href=\"https://github.com/dutscher/7vswild\" class=\"github-corner\"\n   aria-label=\"View source on GitHub\" target=\"_blank\">\n    <svg width=\"80\" height=\"80\" viewBox=\"0 0 250 250\"\n         style=\"fill:#fff; color:#151513; position: absolute; top: 0; border: 0; right: 0;\" aria-hidden=\"true\">\n        <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path>\n        <path d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n              fill=\"currentColor\" style=\"transform-origin: 130px 106px;\" class=\"octo-arm\"></path>\n        <path d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n              fill=\"currentColor\" class=\"octo-body\"></path>\n    </svg>\n</a>\n<style>\n    .github-corner {\n        position: absolute;\n        z-index: 1;\n        right: 0;\n        top: 0;\n    }\n    .github-corner:hover .octo-arm {\n        animation: octocat-wave 560ms ease-in-out\n    }\n    @keyframes octocat-wave {\n        0%, 100% {\n            transform: rotate(0)\n        }\n        20%, 60% {\n            transform: rotate(-25deg)\n        }\n        40%, 80% {\n            transform: rotate(10deg)\n        }\n    }\n    @media (max-width: 500px) {\n        .github-corner:hover .octo-arm {\n            animation: none\n        }\n        .github-corner .octo-arm {\n            animation: octocat-wave 560ms ease-in-out\n        }\n    }\n</style>\n","<script lang=\"ts\">\n    import Welcome from \"../comps/Welcome.svelte\";\n    import Results from \"../comps/Results.svelte\";\n    import Challenges from \"../comps/Challenges.svelte\";\n    import Videos from \"../comps/Videos.svelte\";\n    import Reactions from \"../comps/Reactions.svelte\";\n    import Github from \"../comps/Github.svelte\";\n\n    export let staffelKey;\n</script>\n\n<main>\n    <Github/>\n    <Welcome>\n        <img slot=\"header\" src=\"./images/header-2.jpg\" alt=\"7 Vs Wild Staffel 2\"/>\n        <p>\n            Dies ist eine von der Community gebaute Übersichtsseite für Staffel 2.<br/>\n            Hier seht ihr die Challenge Ergebnisse und zu allen Videos die Reactions der Kandidaten und Ex-Kandidaten.<br/>\n            <b>Viel Spaß damit und Grüße gehen raus an Fritz, Max und Johannes für dieses geile Projekt</b>.\n        </p>\n    </Welcome>\n\n    <center>\n        Quellen:\n        <a class=\"link\" href=\"https://de.wikipedia.org/wiki/7_vs._Wild\" target=\"_blank\">Wikipedia</a> &\n        <a class=\"link\" href=\"https://www.youtube.com/playlist?list=PLPyDkYYqNkPZPb7wkBcfli6PFbyEOi9lL\" target=\"_blank\">Youtube Playlist</a>\n        &\n        <a class=\"link\" href=\"https://www.instagram.com/7vswild/\" target=\"_blank\">Instagram</a>\n    </center>\n\n    <Videos {staffelKey}/>\n    <Reactions {staffelKey}/>\n    <br/>\n    <br/>\n    <Results {staffelKey}><h2>Teilnehmer + Punktestand</h2></Results>\n    <Challenges {staffelKey}/>\n\n    <br/>\n    <h2>Locations</h2>\n    <a href=\"https://www.google.de/maps/@8.2552233,-79.0934911,12.84z\" target=\"_blank\">\n        <img src=\"./images/location-staffel-2.jpg\" class=\"round\" alt=\"Challengers Locations\"/>\n    </a>\n\n    <br/>\n    <img src=\"./images/logo-2.png\" alt=\"7 vs. Wild Logo\"/>\n    <br/>\n    <center>2022</center>\n    <br/>\n    <br/>\n</main>\n\n<style>\n    :global(.season-2) {\n        background-image: url('../images/background-2.jpg');\n        background-size: cover;\n        background-attachment: fixed;\n    }\n\n    img {\n        border-radius: 50%;\n        width: 100%;\n    }\n\n    img.round {\n        border-radius: 50px;\n    }\n</style>\n","<script lang=\"ts\">\n    import \"../scss/app.scss\";\n    import Welcome from \"../comps/Welcome.svelte\";\n    import Results from \"../comps/Results.svelte\";\n    import Challenges from \"../comps/Challenges.svelte\";\n    import Videos from \"../comps/Videos.svelte\";\n    import Reactions from \"../comps/Reactions.svelte\";\n    import Github from \"../comps/Github.svelte\";\n\n    export let staffelKey;\n</script>\n\n<main>\n    <Github/>\n    <Welcome>\n        <img slot=\"header\" src=\"./images/header.jpg\" alt=\"7 Vs Wild Staffel 1\"/>\n        <p>\n            Dies ist eine von der Community gebaute Übersichtsseite für Staffel 1.<br/>\n            Hier seht ihr die Challenge Ergebnisse und zu allen Videos die Reactions der Kandidaten und Ex-Kandidaten.<br/>\n            <b>Viel Spaß damit und Grüße gehen raus an Fritz, Max und Johannes für dieses geile Projekt</b>.\n        </p>\n    </Welcome>\n\n    <center>\n        Quellen:\n        <a class=\"link\" href=\"https://de.wikipedia.org/wiki/7_vs._Wild\" target=\"_blank\">Wikipedia</a> &\n        <a class=\"link\" href=\"https://www.youtube.com/playlist?list=PLPyDkYYqNkPa364y3LyawL8jBTd2Ald2G\" target=\"_blank\">Youtube Playlist</a>\n        &\n        <a class=\"link\" href=\"https://www.instagram.com/7vswild/\" target=\"_blank\">Instagram</a>\n    </center>\n\n    <Results {staffelKey} ><h2>Endergebnisse</h2></Results>\n    <Challenges {staffelKey}/>\n    <Videos {staffelKey}/>\n    <Reactions {staffelKey}/>\n\n    <br/>\n    <h2>Locations</h2>\n    <img src=\"./images/sea.png\" alt=\"Challengers Locations\"/>\n    <br/>\n    <center>Quelle: <a class=\"link\" href=\"https://www.instagram.com/p/CW5JXAxMqX2/\" target=\"_blank\">Instagram</a>\n    </center>\n    <br/>\n    <img src=\"./images/logo.png\" alt=\"7 vs. Wild Logo\"/>\n    <br/>\n    <center>2021</center>\n    <br/>\n    <br/>\n</main>\n\n<style>\n    :global(.season-1) {\n        background-image: url('../images/background.jpg');\n        background-size: cover;\n        background-attachment: fixed;\n    }\n\n    img {\n        border-radius: 50%;\n    }\n</style>\n","<script lang=\"ts\">\n    import \"./scss/app.scss\";\n    import { localStore, storedActiveSelection } from \"./stores\";\n    import Staffel2 from \"./staffel/2022.svelte\";\n    import Staffel1 from \"./staffel/2021.svelte\";\n\n    let staffelKey;\n    const lsStore = localStore.get('latestData')\n\n    storedActiveSelection.subscribe(store => {\n        staffelKey = store.staffelKey\n        //localStore.set('latestData', JSON.stringify({staffelKey: store.staffelKey, episodeID: store.episodeID}));\n    });\n\n\n    const changeStaffel = (data, reason) => {\n        storedActiveSelection.update(store => {\n            return {store, reason, ...data};\n        });\n        if (!lsStore || reason !== 'onmount') {\n            localStore.set('latestData', JSON.stringify({staffelKey: data.staffelKey, episodeID: data.episodeID}));\n        }\n    }\n\n    changeStaffel(lsStore || {staffelKey: 2, episodeID: '1'}, 'onmount');\n</script>\n\n<div class=\"season-{staffelKey}\">\n<button on:click={() => changeStaffel({staffelKey: 1, episodeID: '1'}, 'change-season')}>Staffel 1</button>\n<button on:click={() => changeStaffel({staffelKey: 2, episodeID: '1'}, 'change-season')}>Staffel 2</button>\n\n{#if staffelKey === 1}\n    <Staffel1 {staffelKey}/>\n{:else}\n    <Staffel2 {staffelKey}/>\n{/if}\n\n</div>\n","import App from './App.svelte';\nconst app = new App({\n    target: document.body,\n    props: {}\n});\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","src_url_equal","element_src","url","document","createElement","href","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","tar","src","k","assign","slice","get_slot_changes","dirty","lets","undefined","merged","len","Math","max","length","i","update_slot_base","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","p","get_all_dirty_from_scope","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","d","element","name","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_style","key","important","style","setProperty","toggle_class","toggle","classList","set_current_component","component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","flushing","seen_callbacks","Set","flush","update","$$","pop","callback","has","add","clear","fragment","before_update","after_update","outroing","outros","transition_in","block","local","delete","transition_out","o","c","create_component","mount_component","customElement","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","subscriber_queue","writable","start","stop","subscribers","set","new_value","run_queue","subscriber","subscribe","invalidate","size","storedActiveSelectionWritable","staffelKey","episodeID","reason","site","storedActiveSelection","getSecondsFromStrDuration","strDuration","split","reduce","acc","time","toHHMMSS","secs","sec_num","parseInt","floor","v","join","storedData","youtubeVideoUrl","ID","youtubeThumbUrl","defaultStore","durations","all","main","behindthescenes","interview","reactions","status","videos","challenges","preparedStores","JSON1","JSON2","store","storeIndex","entries","challengerDataNameDays","challengerDataPoints","challengerPoints","endResult","pv","cv","isOut","includes","isWinner","challengerName","exitDay","replace","videosLength","video","durationReactions","challenger","short","youtubeID","duration","id","videoType","title","thumb","date","videoID","youtubeInfos","localStore","localStorage","setItem","defaultShizzle","lsShizzle","getItem","JSON","parse","resultsSorted","sort","points","desc","challengers","showPoints","result","challengesSorted","challenge","activeEpisodeID","setEpisdodeID","querySelector","scrollIntoView","behavior","stringify","find","r","lsStore","changeStaffel","body"],"mappings":"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"}